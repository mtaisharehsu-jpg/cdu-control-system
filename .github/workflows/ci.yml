name: CI/CD Pipeline

on:
  push:
    branches: [ main, development ]
  pull_request:
    branches: [ main ]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    
    services:
      docker:
        image: docker:19.03.12
        options: --privileged
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
    
    - name: Compile HAL library
      run: |
        cd hal/
        make
    
    - name: Run backend tests
      run: |
        python -m pytest test_*.py -v --cov=. --cov-report=xml
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: backend
        name: codecov-backend

  test-frontend:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: cdu-config-ui/package-lock.json
    
    - name: Install frontend dependencies
      run: |
        cd cdu-config-ui/
        npm ci
    
    - name: Run frontend tests
      run: |
        cd cdu-config-ui/
        npm test
    
    - name: Build frontend
      run: |
        cd cdu-config-ui/
        npm run build

  docker-build:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker-compose build --no-cache
    
    - name: Test Docker container
      run: |
        docker-compose up -d
        sleep 30
        curl -f http://localhost:8000/redfish/v1/Chassis/CDU_Main/Thermal/Temperatures/Temp1 || exit 1
        docker-compose down

  integration-tests:
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python 3.8
      uses: actions/setup-python@v4
      with:
        python-version: 3.8
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Run integration tests
      run: |
        python test_integration_logic.py
        python test_distributed_api.py
    
    - name: Test API endpoints
      run: |
        python main_api.py &
        sleep 10
        curl -f http://localhost:8000/redfish/v1/Chassis/CDU_Main/Thermal/Temperatures/Temp1
        pkill -f main_api.py

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      uses: pypa/gh-action-pip-audit@v1.0.8
      with:
        inputs: requirements.txt
    
    - name: Run Bandit security scan
      run: |
        pip install bandit
        bandit -r . -x test_*.py -f json -o bandit-report.json
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-scan-results
        path: bandit-report.json